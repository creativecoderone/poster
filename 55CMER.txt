<div class='' id=''>Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.</div>
<br />
<div class='' id=''>CSS is one of the core languages of the open Web and is standardized across Web browsers according to the W3C specification. Developed in levels, CSS1 is now obsolete, CSS2.1 is a recommendation, and CSS3, now split into smaller modules, is progressing on the standardization track.</div>
<br />
<h5 class='' id=''>CSS first steps</h5>
<br />
<div class='' id=''>CSS (Cascading Style Sheets) is used to style and lay out web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML</div>
<br />
<h5 class='' id=''>CSS building blocks</h5>
<br />
<div class='' id=''>This module carries on where CSS first steps left off — now you've gained familiarity with the language and its syntax, and got some basic experience with using it, its time to dive a bit deeper. This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more.</div>
<br />
<h5 class='' id=''>Styling text</h5>
<br />
<div class='' id=''>With the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you'll do with CSS. Here we look at text styling fundamentals, including setting font, boldness, italics, line and letter spacing, drop shadows and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.</div>
<br />
<h5 class='' id=''>CSS layout</h5>
<br />
<div class='' id=''>At this point we've already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes that your content sits inside. Now it's time to look at how to place your boxes in the right place in relation to the viewport, and one another. We have covered the necessary prerequisites so we can now dive deep into CSS layout, looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the legacy techniques you might still want to know about.</div>
<br />
<div class='' id=''>The basic goal of the Cascading Stylesheet (CSS) language is to allow a browser engine to paint elements of the page with specific features, like colors, positioning, or decorations. The CSS syntax reflects this goal and its basic building blocks are:</div>
<br />
<li class='list-group-item ' id=''>The property which is an identifier, that is a human-readable name, that defines which feature is considered.</li>
<br />
<li class='list-group-item ' id=''>The value which describe how the feature must be handled by the engine. Each property has a set of valid values, defined by a formal grammar, as well as a semantic meaning, implemented by the browser engine.</li>
<br />
<h5 class='' id=''>CSS declarations</h5>
<br />
<div class='' id=''>Setting CSS properties to specific values is the core function of the CSS language. A property and value pair is called a declaration, and any CSS engine calculates which declarations apply to every single element of a page in order to appropriately lay it out, and to style it.</div>
<br />
<div class='' id=''>Both properties and values are case-insensitive by default in CSS. The pair is separated by a colon, ':' (U+003A COLON), and white spaces before, between, and after properties and values, but not necessarily inside, are ignored.</div>
<br />
<img style='width:50%;margin:auto;display:block;padding:10px;' src='https://developer.mozilla.org/@api/deki/files/6164/=css_syntax_-_declaration.png' class='center' id='' />
<br />
<li class='list-group-item ' id=''>There are more than 100 different properties in CSS and a nearly infinite number of different values. Not all pairs of properties and values are allowed and each property defines what are the valid values. When a value is not valid for a given property, the declaration is deemed invalid and is wholly ignored by the CSS engine.</li>
<br />
<h5 class='' id=''>CSS declarations blocks</h5>
<br />
<div class='' id=''>Declarations are grouped in blocks, that is in a structure delimited by an opening brace, '{' (U+007B LEFT CURLY BRACKET), and a closing one, '}' (U+007D RIGHT CURLY BRACKET). Blocks sometimes can be nested, so opening and closing braces must be matched.</div>
<br />
<img style='width:50%;margin:auto;display:block;padding:10px;' src='https://developer.mozilla.org/@api/deki/files/6165/=css_syntax_-_block.png' class='center' id='' />
<br />
<div class='' id=''>Such blocks are naturally called declaration blocks and declarations inside them are separated by a semi-colon, ';' (U+003B SEMICOLON). A declaration block may be empty, that is containing null declaration. White spaces around declarations are ignored. The last declaration of a block doesn't need to be terminated by a semi-colon, though it is often considered good style to do it as it prevents forgetting to add it when extending the block with another declaration.</div>
<br />
<img style='width:50%;margin:auto;display:block;padding:10px;' src='https://developer.mozilla.org/@api/deki/files/6166/=css_syntax_-_declarations_block.png' class='center' id='' />
<br />
<h5 class='' id=''>CSS rulesets</h5>
<br />
<div class='' id=''>If style sheets could only apply a declaration to each element of a Web page, they would be pretty useless. The real goal is to apply different declarations to different parts of the document.</div>
<br />
<div class='alert alert-primary' id=''>CSS allows this by associating conditions with declarations blocks. Each (valid) declaration block is preceded by one or more comma-separated selectors, which are conditions selecting some elements of the page. A selector group and an associated declarations block, together, are called a ruleset, or often simply a rule.</div>
<br />
<img style='width:50%;margin:auto;display:block;padding:10px;' src='https://developer.mozilla.org/@api/deki/files/6167/=css_syntax_-_ruleset.png' class='center' id='' />
<br />
<div class='' id=''>As an element of the page may be matched by several selectors, and therefore by several rules potentially containing a given property several times, with different values, the CSS standard defines which one has precedence over the other and must be applied: this is called the cascade algorithm.</div>
<br />
<h5 class='' id=''>CSS statements</h5>
<br />
<div class='' id=''>Rulesets are the main building blocks of a style sheet, which often consists of only a big list of them. But there is other information that a Web author wants to convey in the style sheet, like the character set, other external style sheets to import, font face or list counter descriptions and many more. It will use other and specific kinds of statements to do that.</div>
<br />
<li class='list-group-item ' id=''>A statement is a building block that begins with any non-space characters and ends at the first closing brace or semi-colon (outside a string, non-escaped and not included into another {}, () or [] pair).</li>
<br />
<img style='width:50%;margin:auto;display:block;padding:10px;' src='https://developer.mozilla.org/@api/deki/files/6168/=css_syntax_-_statements_Venn_diag.png' class='center' id='' />
<br />
<li class='list-group-item ' id=''>Rulesets (or rules) that, as seen, associate a collection of CSS declarations to a condition described by a selector.</li>
<br />
<li class='list-group-item ' id=''>At-rules that start with an at sign, '@' (U+0040 COMMERCIAL AT), followed by an identifier and then continuing up the end of the statement, that is up to the next semi-colon (;) outside of a block, or the end of the next block. Each type of at-rules, defined by the identifier, may have its own internal syntax, and semantics of course. They are used to convey meta-data information (like @charset or @import), conditional information (like @media or @document), or descriptive information (like @font-face).</li>
<br />
<p class='' id=''>Any statement which isn't a ruleset or an at-rule is invalid and ignored.</p>
<br />
<div class='' id=''>There is another group of statements – the nested statements. These are statements that can be used in a specific subset of at-rules – the conditional group rules. These statements only apply if a specific condition is matched: the @media at-rule content is applied only if the device on which the browser runs matches the expressed condition; the @document at-rule content is applied only if the current page matches some conditions, and so on. In CSS1 and CSS2.1, only rulesets could be used inside conditional group rules. That was very restrictive and this restriction was lifted in CSS Conditionals Level 3. Now, though still experimental and not supported by every browser, conditional group rules can contain a wider range of content: rulesets but also some, but not all, at-rules.</div>
<br />
