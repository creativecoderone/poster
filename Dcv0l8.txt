<div class='one two' id='bot'>
	<b>angular-google-charts</b>is a open source angular based wrapper for Google Charts to provides an elegant and feature rich Google Charts visualizations within an Angular application and can be used along with Angular components seamlessly. There are chapters discussing all the basic components of Google Charts with suitable examples within a Angular application.</br>
<b>Google Charts</b>is a pure JavaScript based charting library meant to enhance web applications by adding interactive charting capability. Google Charts provides a wide variety of charts. For example, line charts, spline charts, area charts, bar charts, pie charts and so on. This tutorial will teach you the basics of Google Charts.</br>
<b>Angular</b>is a JavaScript framework for building web applications and apps in JavaScript, html, and TypeScript, which is a superset of JavaScript. Angular provides built-in features for animation, http service, and materials which in turn has features such as auto-complete, navigation, toolbar, menus, etc. The code is written in TypeScript, which compiles to JavaScript and displays the same in the browser</div>
<br />
<h5 class='one two' id='bot'>Prerequisites</h5>
<div class='one two' id='bot'>Before proceeding with this tutorial, you should have a basic understanding of TypeScript/JavaScript, text editor, and execution of programs, etc. Because we are going to develop web-based applications using Angular, it will be good if you have an understanding of other web technologies such as HTML, CSS, and AJAX.</div>
<br />
<h5 class='one two' id='bot'>Features</h5>
<p class='one two' id='bot'>Following are the salient features of Google Charts library.</p>
<li class='list-group-item one two' id='bot'>Compatability − Works seemlessly on all major browsers and mobile platforms like android and iOS.</li>
<li class='list-group-item one two' id='bot'>Multitouch Support − Supports multitouch on touch screen based platforms like android and iOS. Ideal for iPhone/iPad and android based smart phones/ tablets.</li>
<li class='list-group-item one two' id='bot'>Free to Use − Open source and is free to use for non-commercial purpose.</li>
<li class='list-group-item one two' id='bot'>Lightweight − loader.js core library, is extremely lightweight library.</li>
<li class='list-group-item one two' id='bot'>Simple Configurations − Uses json to define various configuration of the charts and very easy to learn and use.</li>
<li class='list-group-item one two' id='bot'>Dynamic − Allows to modify chart even after chart generation.</li>
<li class='list-group-item one two' id='bot'>Multiple axes − Not restricted to x, y axis. Supports multiple axis on the charts.</li>
<li class='list-group-item one two' id='bot'>Configurable tooltips − Tooltip comes when a user hover over any point on a charts. googlecharts provides tooltip inbuilt formatter or callback formatter to control the tooltip programmatically.</li>
<li class='list-group-item one two' id='bot'>DateTime support − Handle date time specially. Provides numerous inbuilt controls over date wise categories.</li>
<li class='list-group-item one two' id='bot'>Print − Print chart using web page.</li>
<li class='list-group-item one two' id='bot'>External data − Supports loading data dynamically from server. Provides control over data using callback functions.</li>
<li class='list-group-item one two' id='bot'>Text Rotation − Supports rotation of labels in any direction.</li>
<br />
<h5 class='one two' id='bot'>Licence</h5>
<p class='one two' id='bot'>Google Charts is open source and is free to use.</p>
<p class='one two' id='bot'>Google Charts and Angular Framework. In this chapter, we will discuss the Environment Setup required for Angular 6. To install Angular 6, we require the following −</p>
<li class='list-group-item one two' id='bot'>Nodejs</br>Npm</br>Angular CLI</br>IDE for writing your code</li>
<p class='one two' id='bot'>Nodejs has to be greater than 8.11 and npm has to be greater than 5.6.</p>
<br />
<h5 class='one two' id='bot'>Install Google Charts Wrapper</h5>
<p class='one two' id='bot'>Run the following command to install Google Charts Wrapper module in the project created.</p>
<p class='one two alert alert-dark' id='bot'>npm angular-google-charts</p>
<div class='one two ' id='bot'>import { GoogleChartsModule } from 'angular-google-charts';</br>imports: [</br>...</br>GoogleChartsModule</br>],</div>
<br />
<h5 class='one two ' id='bot'>Create Angular Application</h5><br />
<p class='one two ' id='bot'>Follow the following steps to update the Angular application we created in Angular 6 - Project Setup chapter −</p>
<li class='list-group-item one two ' id='bot'>1Create a project with a name googleChartsApp as explained in the Angular 6 - Project Setup chapter.</br>2Modify app.module.ts, app.component.ts and app.component.html as explained below. Keep rest of the files unchanged.</br>3Compile and run the application to verify the result of the implemented logic.</li>
<p class='one two alert alert-warning' id='bot'>Following is the content of the modified module descriptor app.module.ts.</p>
<div class='one two a ' id='bot'>import { BrowserModule } from '@angular/platform-browser';</br>import { NgModule } from '@angular/core';</br>import { AppComponent } from './app.component';</br>import { GoogleChartsModule } from 'angular-google-charts';</br>@NgModule({</br>declarations: [</br>AppComponent</br>],</br>imports: [</br>BrowserModule,GoogleChartsModule</br>],</br>providers: [], bootstrap: [AppComponent]</br>})</br>export class AppModule { }</div>
<p class='one two alert alert-warning' id='bot'>Following is the content of the modified HTML host file app.component.html.</p>
<div class='one two' id='bot'>
	<google-chart #chart [title]="title"</br>[type]="type"</br>[data]="data"</br>[columnNames]="columnNames"</br>[options]="options"</br>[width]="width"</br>[height]="height"></br>
</google-chart>
</div>
<p class='one two ' id='bot'>We'll see the updated app.component.ts in the end after understanding configurations.</p>
<br />
<h5 class='one two ' id='bot'>Use Configurations</h5>
<h6 class='one two ' id='bot'>Set Title</h6>
<p class='one two alert alert-dark' id='bot'>title = 'Browser market shares at a specific website, 2014';</p>
<h6 class='one twlert-dark' id='bot'>Set Chart Type</h6>
<p class='one two alert alert-dark' id='bot'>type='PieChart';</p>
<h6 class='one two ' id='bot'>Configure the data to be displayed on the chart.</h6>
<div class='one two ' id='bot'>data = [</br>['Firefox', 45.0],</br>['IE', 26.8],</br>['Chrome', 12.8],</br>['Safari', 8.5],</br>['Opera', 6.2],</br>['Others', 0.7]</br>];</div>
<p class='one two ' id='bot'>Configure the column names to be displayed.</p>
<p class='one two alert alert-dark' id='bot'>columnNames = ['Browser', 'Percentage'];</p>
<br />
<p class='one two ' id='bot'>Configure the other options.</p>
<p class='one two aldark' id='bot'>options = { colors: ['#e0440e', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'], is3D: true};</p>
<p class='one two alert alert-dark' id='bot'>Consider the following example to further understand the Configuration Syntax −</p>
<b>app.component.ts</b>
<div class='one two alert alert-dark' id='bot'>import { Component } from '@angular/core';</br>@Component({</br>selector: 'app-root',</br>templateUrl: './app.component.html',</br>styleUrls: ['./app.component.css']</br>})</br>export class AppComponent {</br>title = 'Browser market shares at a specific website, 2014';</br>type = 'PieChart';</br>data = [</br>['Firefox', 45.0],</br>['IE', 26.8],</br>['Chrome', 12.8],</br>['Safari', 8.5],</br>['Opera', 6.2],</br>['Others', 0.7]</br>];</br>columnNames = ['Browser', 'Percentage'];</br>options = {</br>};</br>width = 550;</br>height = 400;</br>}</div>
</br>
<h6 class='one two alert alert-dark' id='bot'>Verify the result.</h6>
<img style='width:50%;margin:auto;display:block;padding:10px;' src='https://www.tutorialspoint.com/angular_googlecharts/images/angular_googlecharts_pie_basic.jpg' class='center' id='' />
<p class='one two alert alert-primary text-center' id='bot'>Yup</p><style>div,
p,
li {
  padding-bottom: 12px;
}
</style>
