<div class='one two' id='bot'>
	<div class='one two' id='bot'>Before you can use Sass, you need to set it up on your project. If you want to just browse here, go ahead, but we recommend you go install Sass first. Go here if you want to learn how to get everything s</div>
	<br />
	<h5 class='one two' id='bot'>Preprocessing</h5>
	<br />
	<div class='one two' id='bot'>CSS on its own can be fun, but stylesheets are getting larger, more complex, and harder to maintain. This is where a preprocessor can help. Sass lets you use features that don't exist in CSS yet like variables, nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again.</div>
	<br />
	<div class='one two' id='bot'>Once you start tinkering with Sass, it will take your preprocessed Sass file and save it as a normal CSS file that you can use in your website.</div>
	<br />
	<div class='one two' id='bot'>The most direct way to make this happen is in your terminal. Once Sass is installed, you can compile your Sass to CSS using the sass command. You'll need to tell Sass which file to build from, and where to output CSS to. For example, running sass input.scss output.css from your terminal would take a single Sass file, input.scss, and compile that file to output.css.</div>
	<br />
	<div class='one two' id='bot'>You can also watch individual files or directories with the --watch flag. The watch flag tells Sass to watch your source files for changes, and re-compile CSS each time you save your Sass. If you wanted to watch (instead of manually build) your input.scss file, you'd just add the watch flag to your command, like so:</div>
	<br />
	<p class='one two alert alert-dark' id='bot'>sass --watch input.scss output.css</p>
	<p class='one two al ert ale rt-dark' id='bot'>You can watch and output to directories by using folder paths as your input and output, and separating them with a colon. In this example:</p>
	<p class='one two alert alert-dark' id='bot'>sass --watch app/sass:public/stylesheets</p>
	<p class='one two alrt alert-drk' id='bot'>Sass would watch all files in the app/sass folder for changes, and compile CSS to the public/stylesheets folder.</p>
</div>
<hr />
<h5 class='one two' id='bot'>Variables</h5>
<br />
<div class='one two' id='bot'>Think of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you'll want to reuse. Sass uses the $ symbol to make something a variable. Here's an example:</div>
<br />
<b>Scss</b>
<div class='one two' id='bot'>
	<p class='one two' id='bot'>$font-stack: Helvetica, sans-serif;
		<br />$primary-color: #333;
		<br />
		<br />body {
		<br />font: 100% $font-stack;
		<br />color: $primary-color;
		<br />}
		<br />
	</p>
</div>
<br />
<b>Css</b>
<p class='one two' id='bot'>body {
	<br />font: 100% Helvetica, sans-serif;
	<br />color: #333;
	<br />}
	<br /></p>
<br />
<div class='one two' id='bot'>When the Sass is processed, it takes the variables we define for the $font-stack and $primary-color and outputs normal CSS with our variable values placed in the CSS. This can be extremely powerful when working with brand colors and keeping them consistent throughout the site.</div>
<br />
<hr />
<h5 class='one two' id='bot'>Nesting</h5>
<br />
<div class='one two' id='bot'>When writing HTML you've probably noticed that it has a clear nested and visual hierarchy. CSS, on the other hand, doesn't.Sass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice.</div>
<br />
<b>Scss</b>
<br />
<p class='one two' id='bot'>nav {
	<br />ul {
	<br />margin: 0;
	<br />padding: 0;
	<br />list-style: none;
	<br />}
	<br />
	<br />li { display: inline-block; }
	<br />
	<br />a {
	<br />display: block;
	<br />padding: 6px 12px;
	<br />text-decoration: none;
	<br />}
	<br />}
	<br /></p>
<br />
<b>Css</b>
<br />
<p class='one two' id='bot'>nav ul {
	<br />margin: 0;
	<br />padding: 0;
	<br />list-style: none;
	<br />}
	<br />nav li {
	<br />display: inline-block;
	<br />}
	<br />nav a {
	<br />display: block;
	<br />padding: 6px 12px;
	<br />text-decoration: none;
	<br />}
	<br /></p>
<p class='one two' id='bot'>You'll notice that the ul, li, and a selectors are nested inside the nav selector. This is a great way to organize your CSS and make it more readable.</p>
<hr />
<h5 class='one two' id='bot'>Partials</h5>
<br />
<div class='one two' id='bot'>You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is a Sass file named with a leading underscore. You might name it something like _partial.scss. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the @use rule.</div>
<br />
